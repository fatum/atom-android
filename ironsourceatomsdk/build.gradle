apply plugin: 'com.android.library'
apply plugin: 'jacoco'
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'
        classpath 'com.github.dcendents:android-maven-plugin:1.2'

    }
}

android {
    compileSdkVersion 22
    buildToolsVersion "21.1.1"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        project.version = versionName
        project.archivesBaseName = "IronSourceAtomSDK"
    }

    buildTypes {
        def BOOLEAN = "boolean"
        def TRUE = "true"
        def FALSE = "false"
        def STRING = "String"

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'mobileCore.pro'
            buildConfigField(STRING, "DEFAULT_URL", '"http://sdk.ironsourceatom.io"')
            buildConfigField(STRING, "DEFAULT_BULK_URL", '"http://sdk.ironsourceatom.io/bulk"')
            buildConfigField(BOOLEAN, "IS_SUPER_DEV_MODE", FALSE)
        }
        debug {
            buildConfigField(STRING, "DEFAULT_URL", '"http://track.atom-data.io"')
            buildConfigField(STRING, "DEFAULT_BULK_URL", '"http://track.atom-data.io/bulk"')
            buildConfigField(BOOLEAN, "IS_SUPER_DEV_MODE", TRUE)
            testCoverageEnabled = true
        }
        debugGoogleEmulator {
            buildConfigField(STRING, "DEFAULT_URL", '"http://track.atom-data.io"')
            buildConfigField(STRING, "DEFAULT_BULK_URL", '"http://track.atom-data.io/bulk"')
            buildConfigField(BOOLEAN, "IS_SUPER_DEV_MODE", TRUE)
        }

        debugGenyMotionEmulator {
            buildConfigField(STRING, "DEFAULT_URL", '"http://track.atom-data.io"')
            buildConfigField(STRING, "DEFAULT_BULK_URL", '"http://track.atom-data.io/bulk"')
            buildConfigField(BOOLEAN, "IS_SUPER_DEV_MODE", TRUE)
        }
        jacoco {
            version "0.7.1.201405082137"
        }
        packagingOptions {
            exclude 'META-INF/DEPENDENCIES.txt'
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
            exclude 'META-INF/NOTICE'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/DEPENDENCIES'
            exclude 'META-INF/notice.txt'
            exclude 'META-INF/license.txt'
            exclude 'META-INF/dependencies.txt'
            exclude 'META-INF/LGPL2.1'
            exclude 'META-INF/services/javax.annotation.processing.Processor'
            exclude 'LICENSE.txt'
        }
    }



    //release type by default so for test we need to set debug
    defaultPublishConfig "debug"
    // important shit for sdk module use
    // If you wanted to change the default published variant while using flavors, you would write:
    //defaultPublishConfig "devRelease"
    //Publishing of all variants are not enabled by default. To enable them:
    //publishNonDefault true

    sourceSets {
        main {
            java.srcDirs = ["src/main/java"]
        }
        test {
            resources {
                srcDir "test"
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    // Configure tests
    testOptions {
        unitTests.returnDefaultValues = true
    }
}
dependencies {
    // Unit testing dependencies
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile('org.robolectric:robolectric:3.0-rc2') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    // JSONObject should be available in tests too
    testCompile 'org.json:json:20090211'
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
        //classpath 'com.dicedmelon.gradle:jacoco-android:0.1.1'
    }
}


task clearJar(type: Delete) {
    delete "../output/${archivesBaseName}${version}_release.jar"
    delete "../output/${archivesBaseName}${version}_debug.jar"
}

task makeReleaseJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('../output/')
    include('classes.jar')
    rename ('classes.jar', "${archivesBaseName}_v${version}_release.jar")
}
task makeDebugJar(type: Copy) {
    from('build/intermediates/bundles/debug/')
    into('../output/')
    include('classes.jar')
    rename ('classes.jar', "${archivesBaseName}_v${version}_debug.jar")
}

jacoco {
    toolVersion "0.7.1.201405082137"
}

// Define coverage source.
// If you have rs/aidl etc... add them here.
def coverageSourceDirs = [
        'src/main/java',
]

task jacocoTestReport(type: JacocoReport, dependsOn: "connectedDebugAndroidTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
        reports {
            xml.enabled false
            csv.enabled false
            html.destination "${buildDir}/reports/jacoco/html"
        }

    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['**/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ])
    sourceDirectories = files(coverageSourceDirs)
    executionData = files("$buildDir/jacoco/testDebugUnitTest.exec")
    // Bit hacky but fixes https://code.google.com/p/android/issues/detail?id=69174.
    // We iterate through the compiled .class tree and rename $$ to $.
    doFirst {
        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}




assembleRelease.dependsOn(clearJar, makeReleaseJar)
assembleDebug.dependsOn(clearJar, makeDebugJar)



