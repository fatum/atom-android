buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2' }

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0x"

    }
}


apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'maven'

dependencies {

    // Unit testing dependencies
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile('org.robolectric:robolectric:3.0-rc2') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    // JSONObject should be available in tests too
    testCompile 'org.json:json:20090211'
}


android {
    compileSdkVersion 22
    buildToolsVersion "21.1.1"


    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 22
        versionCode 1
        versionName "1.0.0"
        project.version = versionName
        project.archivesBaseName = "atomandroid"
    }

    buildTypes {
        def BOOLEAN = "boolean"
        def TRUE = "true"
        def FALSE = "false"
        def STRING = "String"

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'mobileCore.pro'
            buildConfigField(STRING, "DEFAULT_URL", '"http://sdk.ironsourceatom.io"')
            buildConfigField(STRING, "DEFAULT_BULK_URL", '"http://sdk.ironsourceatom.io/bulk"')
            buildConfigField(BOOLEAN, "IS_SUPER_DEV_MODE", FALSE)
            testCoverageEnabled = true

        }
        debug {
            buildConfigField(STRING, "DEFAULT_URL", '"http://track.atom-data.io"')
            buildConfigField(STRING, "DEFAULT_BULK_URL", '"http://track.atom-data.io/bulk"')
            buildConfigField(BOOLEAN, "IS_SUPER_DEV_MODE", TRUE)



        }
        debugGoogleEmulator {
            buildConfigField(STRING, "DEFAULT_URL", '"http://track.atom-data.io"')
            buildConfigField(STRING, "DEFAULT_BULK_URL", '"http://track.atom-data.io/bulk"')
            buildConfigField(BOOLEAN, "IS_SUPER_DEV_MODE", TRUE)


        }

        debugGenyMotionEmulator {
            buildConfigField(STRING, "DEFAULT_URL", '"http://track.atom-data.io"')
            buildConfigField(STRING, "DEFAULT_BULK_URL", '"http://track.atom-data.io/bulk"')
            buildConfigField(BOOLEAN, "IS_SUPER_DEV_MODE", TRUE)


        }

    }

    //release type by default so for test we need to set debug
    defaultPublishConfig "debug"


    sourceSets {
        main {
            java.srcDirs = ["src/main/java"]
        }
        test {
            resources {
                srcDir "test"
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    // Configure tests
    testOptions {
        unitTests.returnDefaultValues = true
    }
}


task clearJar(type: Delete) {
    delete "../output/${archivesBaseName}-${version}.jar"
    delete "../output/${archivesBaseName}-${version}_debug.jar"
}


task makeReleaseJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('../output/')
    include('classes.jar')
    rename ('classes.jar', "${archivesBaseName}-${version}.jar")
}
task makeDebugJar(type: Copy) {
    from('build/intermediates/bundles/debug/')
    into('../output/')
    include('classes.jar')
    rename ('classes.jar', "${archivesBaseName}-${version}_debug.jar")
}



// Define coverage source.
// If you have rs/aidl etc... add them here.
def coverageSourceDirs = [
        'src/main/java',
]

task jacocoTestReport(type: JacocoReport, dependsOn: "connectedDebugAndroidTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
        reports {
            xml.enabled true
            csv.enabled false
            html.destination "${buildDir}/reports/jacoco/html"
        }

    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug/io/ironsourceatom/sdk',
            excludes: [
                       'SdkEvent.class',
                       'SimpleReportService.class',
                       'ReportService.class',
                       'Consts.class',
                       'SimpleReportHandler.class',
                       'SdkEvent.class',
                       'Report.class',
                       'Logger.class',
                       'ReportIntent.class',
                       'RemoteService.class',
                       'ExternalVars'



            ])

    sourceDirectories = files(coverageSourceDirs)
    executionData = files("$buildDir/jacoco/testDebugUnitTest.exec")
    // Bit hacky but fixes https://code.google.com/p/android/issues/detail?id=69174.
    // We iterate through the compiled .class tree and rename $$ to $.
    doFirst {
        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}
coveralls {
    //sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoTestReport
    //onlyIf { System.env.'CI' }
}


task createPom {
    pom {
        project {
            groupId 'com.ironsrc.atom'
            artifactId 'atomandroid'
            version "${version}"

            inceptionYear '2016'

            licenses {
                license {
                    name 'MIT'
                    url 'http://opensource.org/licenses/MIT'

                    distribution 'repo'
                }
            }


        }
    }.writeTo("../output/${version}.pom")
}

assembleRelease.dependsOn(clearJar, makeReleaseJar)
assembleDebug.dependsOn(clearJar, makeDebugJar)



